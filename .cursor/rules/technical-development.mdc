---
description:
globs:
alwaysApply: false
---
# 技术开发规则

## JavaScript开发标准

### 核心功能模块

#### 星盘分析模块
主文件：[js/birth-chart.js](mdc:js/birth-chart.js)

**功能要求**：
- 支持精确的天体位置计算
- 多行星相位分析（至少3个要素交叉解读）
- 个性化解读生成
- 错误处理和输入验证

**代码标准**：
```javascript
// 使用现代ES6+语法
// 模块化设计
// 详细的注释说明
// 错误边界处理
```

#### 月亮星座计算
主文件：[js/moon-sign-calculator.js](mdc:js/moon-sign-calculator.js)

**精度要求**：
- 时区转换准确性
- 历法修正计算
- 边界时间处理
- 计算误差说明

### 宇宙数据管理
主文件：[js/cosmic-data.js](mdc:js/cosmic-data.js)

**数据结构要求**：
- 标准化的星象数据格式
- 高效的查询算法
- 数据缓存机制
- 更新版本控制

### 性能优化标准

#### 脚本加载优化
主文件：[js/script.js](mdc:js/script.js)

**优化策略**：
- 延迟加载非关键功能
- 代码分割和懒加载
- 压缩和混淆
- CDN资源利用

#### 缓存策略
```javascript
// 本地存储用户偏好
// 计算结果缓存
// 静态资源缓存控制
// 版本化缓存失效
```

## 前端架构规范

### HTML结构标准
参考：[index.html](mdc:index.html)

**语义化要求**：
- 使用正确的HTML5语义标签
- 结构化数据标记（Schema.org）
- 可访问性（ARIA标签）
- SEO友好的URL结构

### CSS架构
主文件：[css/style.css](mdc:css/style.css)
移动端：[css/mobile-fix.css](mdc:css/mobile-fix.css)

**组织原则**：
- BEM命名规范
- 模块化CSS架构
- 响应式设计优先
- 浏览器兼容性

**性能要求**：
- 最小化重排和重绘
- 关键CSS内联
- 非关键CSS延迟加载
- 字体优化加载

### 响应式设计标准

#### 断点策略
```css
/* 移动优先设计 */
/* 320px+ 小屏手机 */
/* 768px+ 平板 */
/* 1024px+ 桌面 */
/* 1440px+ 大屏 */
```

#### 移动端优化
参考：[css/mobile-fix.css](mdc:css/mobile-fix.css)

- 触摸友好的交互元素
- 适配不同屏幕密度
- 性能优化的动画
- 移动端特定功能

## 功能开发指南

### 星座工具增强

#### 配对分析工具
参考：[js/zodiac-compatibility.js](mdc:js/zodiac-compatibility.js)

**功能扩展**：
- 多维度配对分析
- 详细的兼容性报告
- 改善建议提供
- 历史记录功能

#### 免费阅读功能
参考：[pages/free-astrology-reading.html](mdc:pages/free-astrology-reading.html)

**价值提升**：
- 增加分析深度
- 个性化推荐
- 用户互动元素
- 分享功能

### 新功能开发

#### 幸运日历功能
新建文件：`js/lucky-calendar.js`

**需求规格**：
- 基于个人星盘的幸运日计算
- 可视化日历界面
- 事件提醒功能
- 导出功能

#### 进阶分析工具
新建文件：`js/advanced-analysis.js`

**功能特性**：
- 流年运势分析
- 人生周期计算
- 行星回归预测
- 专业术语解释

## 数据处理和安全

### 用户数据保护

#### 输入验证
```javascript
// 严格的数据类型检查
// XSS防护
// SQL注入防护
// 输入长度限制
```

#### 隐私保护
- 最小化数据收集
- 本地存储优先
- 数据加密传输
- 用户控制权限

### API设计原则

#### 错误处理
```javascript
// 统一的错误响应格式
// 用户友好的错误提示
// 详细的日志记录
// 优雅的降级处理
```

#### 性能监控
- 响应时间监控
- 错误率统计
- 用户行为分析
- 性能瓶颈识别

## SEO技术实现

### 结构化数据
每个页面添加适当的Schema.org标记：

```json
{
  "@context": "https://schema.org",
  "@type": "Article",
  "headline": "文章标题",
  "author": "作者信息",
  "datePublished": "发布日期",
  "description": "文章描述"
}
```

### 页面速度优化

#### 关键渲染路径优化
- CSS关键路径识别
- JavaScript异步加载
- 资源预加载策略
- 图片懒加载

#### 核心Web指标
- LCP (Largest Contentful Paint) < 2.5s
- FID (First Input Delay) < 100ms
- CLS (Cumulative Layout Shift) < 0.1

### 分析和监控

#### Google Analytics集成
参考：[js/seo-analytics.js](mdc:js/seo-analytics.js)

**跟踪指标**：
- 页面访问量
- 用户行为路径
- 转化率分析
- 内容效果评估

#### 性能监控工具
- Google PageSpeed Insights
- Web Vitals监控
- 用户体验指标
- 错误监控系统

## 开发工作流

### 代码质量控制

#### 代码审查清单
- [ ] 功能正确性验证
- [ ] 性能影响评估
- [ ] 安全性检查
- [ ] 浏览器兼容性测试
- [ ] 移动端适配验证

#### 测试策略
- 单元测试覆盖关键算法
- 集成测试验证用户流程
- 跨浏览器兼容性测试
- 性能回归测试

### 部署和发布

#### 生产环境优化
- 代码压缩和混淆
- 资源合并和优化
- CDN配置
- 缓存策略设置

#### 监控和维护
- 错误日志监控
- 性能指标跟踪
- 用户反馈收集
- 定期安全更新

## 技术债务管理

### 代码重构优先级
1. **性能瓶颈**：影响用户体验的性能问题
2. **安全漏洞**：潜在的安全风险
3. **兼容性问题**：浏览器或设备兼容性
4. **可维护性**：代码质量和架构优化

### 技术升级计划
- 定期更新依赖库
- 采用现代Web标准
- 性能优化技术应用
- 新功能技术选型

## 紧急响应程序

### 故障处理流程
1. **快速诊断**：确定问题范围和影响
2. **临时修复**：最小化用户影响
3. **根因分析**：深入调查问题原因
4. **永久解决**：实施长期解决方案
5. **预防措施**：避免类似问题再发生
